package upo.graph.implementation;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;

import upo.graph.base.*;
import upo.graph.base.VisitForest.Color;
import upo.graph.base.VisitForest.VisitType;

/**
 * Implementazione mediante <strong>matrice di adiacenza</strong> di un grafo <strong>non orientato pesato</strong>.
 * 
 * @author Tommaso Massaza 20024548
 * @author Ettore Giorgio 20026147
 */
public class AdjMatrixUndirWeight implements WeightedGraph{

	private double[][] vertici;
	private int size;
	
	private final int INFINITE=Integer.MAX_VALUE;
	
	public AdjMatrixUndirWeight() {
		size=0;
		vertici=new double[0][0];
	}
	
	public void stampa() {
		System.out.println();
		System.out.print(" ");
		for(int k=0; k<size; k++) System.out.print("   "+k);
		System.out.println();
		System.out.print("  ");
		for(int k=0; k<size; k++) System.out.print(" ___");
		System.out.println();
		for(int i=0; i<size; i++) {
			System.out.print(i+" ");
			for(int j=0; j<size; j++) {
				if(vertici[i][j]==this.INFINITE) 
					System.out.print("|"+"\u221E  ");
				else
				    System.out.print("|"+vertici[i][j]);
			}
			System.out.println("|");
			System.out.print("  ");
			for(int k=0; k<size; k++) System.out.print("|___");
			System.out.println("|");
		}
		System.out.println();
	}
	
	@Override
	public int addVertex() {
		size++;
		double[][] temp = new double[size][size];
		
		//size-1 perchÃ¨ la matrice vertici non ha grandezza size, ma size-1, andrei in contro ad un eccezzione
		for(int i=0; i<size-1; i++) { 
			for(int j=0; j<size-1; j++) {
				temp[i][j]=vertici[i][j];
			}
		}
		
		vertici=temp;
		
		//riempo le caselle del nuovo vertice
		for(int i=0; i<size; i++)
			vertici[i][size-1]=this.INFINITE;
		for(int i=0; i<size; i++)
			vertici[size-1][i]=this.INFINITE;
		vertici[size-1][size-1]=0;
		
		return size-1;
	}
	
	@Override
	public boolean containsVertex(int index) {
		if(size>index) return true;
		else return false;
	}

	@Override
	public void removeVertex(int index) throws NoSuchElementException {
		if(containsVertex(index)==false) throw new NoSuchElementException();
		size--;
		double[][] temp = new double[size][size];
		
		for(int i=0; i<size; i++) {
			for(int j=0; j<size; j++) {
				if(i<index) {
					if(j>=index) temp[i][j]=vertici[i][j+1];
					else temp[i][j]=vertici[i][j];
				}
				else { //i>=size
					if(j<index) temp[i][j]=vertici[i+1][j];
					else temp[i][j]=vertici[i+1][j+1];
				}
			}
		}
		
		vertici=temp;
	}

	@Override
	public void addEdge(int sourceVertexIndex, int targetVertexIndex) throws IllegalArgumentException {
		if(containsVertex(sourceVertexIndex)==false || containsVertex(targetVertexIndex)==false)
			throw new IllegalArgumentException();
		
		vertici[sourceVertexIndex][targetVertexIndex]=WeightedGraph.defaultEdgeWeight;
		vertici[targetVertexIndex][sourceVertexIndex]=WeightedGraph.defaultEdgeWeight;
	}

	@Override
	public boolean containsEdge(int sourceVertexIndex, int targetVertexIndex) throws IllegalArgumentException {
		if(containsVertex(sourceVertexIndex)==false || containsVertex(targetVertexIndex)==false)
			throw new IllegalArgumentException();
		
		if(vertici[sourceVertexIndex][targetVertexIndex]!=this.INFINITE && vertici[sourceVertexIndex][targetVertexIndex]!=0)
			return true;
		else 
			return false;
	}
 
	@Override
	public void removeEdge(int sourceVertexIndex, int targetVertexIndex)
			throws IllegalArgumentException, NoSuchElementException {
		
		if(containsVertex(sourceVertexIndex)==false || containsVertex(targetVertexIndex)==false)
			throw new IllegalArgumentException();
		
		if(vertici[sourceVertexIndex][targetVertexIndex]==this.INFINITE || vertici[sourceVertexIndex][targetVertexIndex]==0)
			throw new NoSuchElementException();
		
		vertici[sourceVertexIndex][targetVertexIndex]=this.INFINITE;
		vertici[targetVertexIndex][sourceVertexIndex]=this.INFINITE;
	}

	@Override
	public Set<Integer> getAdjacent(int vertexIndex) throws NoSuchElementException {
		if(containsVertex(vertexIndex)==false) 
			throw new NoSuchElementException();
		
		Set<Integer> ret = new HashSet<Integer>();
		
		for(int i=0; i<size; i++)
			if(vertici[i][vertexIndex]!=0 && vertici[i][vertexIndex]!=this.INFINITE)
				ret.add(i);
		
		return ret;
	}

	@Override
	public boolean isAdjacent(int targetVertexIndex, int sourceVertexIndex) throws IllegalArgumentException {
		if(containsVertex(sourceVertexIndex)==false || containsVertex(targetVertexIndex)==false)
			throw new IllegalArgumentException();
		
		if(vertici[sourceVertexIndex][targetVertexIndex]!=this.INFINITE && vertici[sourceVertexIndex][targetVertexIndex]!=0)
			return true;
		else 
			return false;
	}

	@Override
	public int size() {
		return size;
	}

	@Override
	public boolean isDirected() {
		return false;
	}

	@Override
	public boolean isCyclic() {
		VisitForest visita=new VisitForest(this, VisitType.DFS_TOT);
		for(int i=0; i<size; i++) {
			if(visita.getColor(i)==Color.WHITE && visitaRicCiclo(visita, i)) 
				return true;
		}
		return false;
	}
	
	private boolean visitaRicCiclo(VisitForest visita, int u) {
		visita.setColor(u, Color.GRAY);
		for(Integer v : this.getAdjacent(u)) {
			if(visita.getColor(v)==Color.WHITE) {
				visita.setParent(v, u);
				if(visitaRicCiclo(visita, v)) return true;
			}
			else if(visita.getColor(v)==Color.GRAY) return true;
		}
		visita.setColor(u, Color.BLACK);
		return false;
	}

	@Override
	public boolean isDAG() {
		return false;
	}

	@Override
	public VisitForest getBFSTree(int startingVertex) throws UnsupportedOperationException, IllegalArgumentException {
		throw new UnsupportedOperationException();
	}

	@Override
	public VisitForest getDFSTree(int startingVertex) throws UnsupportedOperationException, IllegalArgumentException {
		if(this.containsVertex(startingVertex)==false) throw new IllegalArgumentException();
		
		List<Integer> stack = new LinkedList<Integer>();
		VisitForest visita=new VisitForest(this, VisitType.DFS);
		visita.setColor(startingVertex, Color.GRAY);
		//visita startingVertex
		System.out.println("Sto visitando il vertice "+startingVertex+".");
		//fine visita
		stack.add(startingVertex); //push
		Integer u;
		while(stack.isEmpty()==false) {
			u=stack.get(0);
			boolean passato=false;
			for(Integer v : this.getAdjacent(u)) {
				if(visita.getColor(v)==Color.WHITE) {
					passato=true;
					visita.setColor(v, Color.GRAY);
					visita.setParent(v, u);
					//visita v
					System.out.println("Sto visitando il vertice "+v+".");
					//fine visita
					stack.add(0, v); //push
					break;
				}
			}
			if(passato==false) {
				visita.setColor(u, Color.BLACK);
				stack.remove(0);
			}
		}
		return visita;
	}

	@Override
	public VisitForest getDFSTOTForest(int startingVertex) throws UnsupportedOperationException, IllegalArgumentException {
		if(this.containsVertex(startingVertex)==false) throw new IllegalArgumentException();
		
		List<Integer> stack = new LinkedList<Integer>();
		VisitForest visita=new VisitForest(this, VisitType.DFS_TOT);
		visita.setColor(startingVertex, Color.GRAY);
		//visita startingVertex
		System.out.println("Sto visitando il vertice "+startingVertex+".");
		//fine visita
		stack.add(startingVertex); //push
		Integer u;
		while(stack.isEmpty()==false) {
			u=stack.get(0);
			boolean passato=false;
			for(Integer v : this.getAdjacent(u)) {
				if(visita.getColor(v)==Color.WHITE) {
					passato=true;
					visita.setColor(v, Color.GRAY);
					visita.setParent(v, u);
					//visita v
					System.out.println("Sto visitando il vertice "+v+".");
					//fine visita
					stack.add(0, v); //push
					break;
				}
			}
			if(passato==false) {
				visita.setColor(u, Color.BLACK);
				stack.remove(0);
			}
			//se non trovo vertici adiacenti ad U ne scelgo uno non adiacente e lo aggiungo alla frangia
			if(stack.isEmpty()) {
			    for(int i=0; i<size; i++)
			    	if(visita.getColor(i)==Color.WHITE) {
			    		visita.setColor(i, Color.GRAY);
			    		//visita i
						System.out.println("Sto visitando il vertice "+i+".");
						//fine visita
					    stack.add(0, i); //push
					    break;
			    	}
			}
		}
			
		return visita;
	}

	@Override // da implementare
	public VisitForest getDFSTOTForest(int[] vertexOrdering) throws UnsupportedOperationException, IllegalArgumentException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int[] topologicalSort() throws UnsupportedOperationException {
		throw new UnsupportedOperationException();
	}

	@Override
	public Set<Set<Integer>> stronglyConnectedComponents() throws UnsupportedOperationException {
		throw new UnsupportedOperationException();
	}

	@Override
	public Set<Set<Integer>> connectedComponents() throws UnsupportedOperationException {
		Set<Set<Integer>> componentiConnesse=new HashSet<Set<Integer>>();
		VisitForest visitaTotale=new VisitForest(this, VisitType.DFS_TOT);
		
		for(int i=0; i<size; i++) {
			if(visitaTotale.getColor(i)==Color.WHITE) {
				Set<Integer> alberoDiVisita=new HashSet<Integer>();
				alberoDiVisita.add(i); //aggiungo il primo vertice bianco trovato(la radice senza predecessori)
				VisitForest visitaSingola=this.getDFSTree(i);
				for(int j=0; j<size; j++) {
					if(visitaSingola.getParent(j)!=null) {
						alberoDiVisita.add(j);
						visitaTotale.setColor(j, Color.BLACK);
					}
				}
				componentiConnesse.add(alberoDiVisita);
			}
		}
		
		return componentiConnesse;
	}
	
	@Override
	public double getEdgeWeight(int sourceVertexIndex, int targetVertexIndex) throws IllegalArgumentException, NoSuchElementException {
		if(containsVertex(sourceVertexIndex)==false || containsVertex(targetVertexIndex)==false)
			throw new IllegalArgumentException();
		
		if(containsEdge(sourceVertexIndex, targetVertexIndex)==false)
			throw new NoSuchElementException();
		
		return vertici[sourceVertexIndex][targetVertexIndex];
	}

	@Override
	public void setEdgeWeight(int sourceVertexIndex, int targetVertexIndex, double weight) throws IllegalArgumentException, NoSuchElementException {
		if(containsVertex(sourceVertexIndex)==false || containsVertex(targetVertexIndex)==false)
			throw new IllegalArgumentException();
		
		if(containsEdge(sourceVertexIndex, targetVertexIndex)==false)
			throw new NoSuchElementException();
		
		vertici[sourceVertexIndex][targetVertexIndex]=weight;
		vertici[targetVertexIndex][sourceVertexIndex]=weight;
	}
}